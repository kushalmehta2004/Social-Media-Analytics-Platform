version: '3.8'

services:
  # Message Queue & Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: social_analytics
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://analytics_user:analytics_pass@postgres:5432/social_analytics
      - ML_SERVICE_URL=http://ml-service:8001
      - ANALYTICS_SERVICE_URL=http://analytics-api:8002
    depends_on:
      - redis
      - postgres
    volumes:
      - ./services/api-gateway:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # ML Service for NLP Processing
  ml-service:
    build:
      context: ./services/ml-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_CACHE_DIR=/app/models
    depends_on:
      - redis
    volumes:
      - ./services/ml-service:/app
      - ml_models:/app/models
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  # Analytics API
  analytics-api:
    build:
      context: ./services/analytics-api
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://analytics_user:analytics_pass@postgres:5432/social_analytics
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/analytics-api:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload

  # Data Ingestion Service
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://analytics_user:analytics_pass@postgres:5432/social_analytics
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - ML_SERVICE_URL=http://ml-service:8001
    depends_on:
      - redis
      - postgres
      - ml-service
    volumes:
      - ./services/data-ingestion:/app
    command: python main.py

  # WebSocket Service for Real-time Updates
  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    volumes:
      - ./services/websocket-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8003 --reload

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8003
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  redis_data:
  postgres_data:
  ml_models:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: social_analytics_network